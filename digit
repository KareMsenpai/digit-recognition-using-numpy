{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b3b4ff4d",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-08-24T12:53:54.650951Z",
     "iopub.status.busy": "2024-08-24T12:53:54.650293Z",
     "iopub.status.idle": "2024-08-24T12:53:55.181323Z",
     "shell.execute_reply": "2024-08-24T12:53:55.179718Z"
    },
    "papermill": {
     "duration": 0.54213,
     "end_time": "2024-08-24T12:53:55.184762",
     "exception": false,
     "start_time": "2024-08-24T12:53:54.642632",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "from matplotlib import pyplot as plt\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "70aa232b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-24T12:53:55.196711Z",
     "iopub.status.busy": "2024-08-24T12:53:55.195988Z",
     "iopub.status.idle": "2024-08-24T12:53:59.912990Z",
     "shell.execute_reply": "2024-08-24T12:53:59.911563Z"
    },
    "papermill": {
     "duration": 4.72667,
     "end_time": "2024-08-24T12:53:59.916395",
     "exception": false,
     "start_time": "2024-08-24T12:53:55.189725",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data = pd.read_csv(\"/kaggle/input/digit-recognizer/train.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e5e87aaa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-24T12:53:59.928818Z",
     "iopub.status.busy": "2024-08-24T12:53:59.928334Z",
     "iopub.status.idle": "2024-08-24T12:53:59.962830Z",
     "shell.execute_reply": "2024-08-24T12:53:59.961573Z"
    },
    "papermill": {
     "duration": 0.044385,
     "end_time": "2024-08-24T12:53:59.965933",
     "exception": false,
     "start_time": "2024-08-24T12:53:59.921548",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>label</th>\n",
       "      <th>pixel0</th>\n",
       "      <th>pixel1</th>\n",
       "      <th>pixel2</th>\n",
       "      <th>pixel3</th>\n",
       "      <th>pixel4</th>\n",
       "      <th>pixel5</th>\n",
       "      <th>pixel6</th>\n",
       "      <th>pixel7</th>\n",
       "      <th>pixel8</th>\n",
       "      <th>...</th>\n",
       "      <th>pixel774</th>\n",
       "      <th>pixel775</th>\n",
       "      <th>pixel776</th>\n",
       "      <th>pixel777</th>\n",
       "      <th>pixel778</th>\n",
       "      <th>pixel779</th>\n",
       "      <th>pixel780</th>\n",
       "      <th>pixel781</th>\n",
       "      <th>pixel782</th>\n",
       "      <th>pixel783</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 785 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   label  pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  \\\n",
       "0      1       0       0       0       0       0       0       0       0   \n",
       "1      0       0       0       0       0       0       0       0       0   \n",
       "2      1       0       0       0       0       0       0       0       0   \n",
       "3      4       0       0       0       0       0       0       0       0   \n",
       "4      0       0       0       0       0       0       0       0       0   \n",
       "\n",
       "   pixel8  ...  pixel774  pixel775  pixel776  pixel777  pixel778  pixel779  \\\n",
       "0       0  ...         0         0         0         0         0         0   \n",
       "1       0  ...         0         0         0         0         0         0   \n",
       "2       0  ...         0         0         0         0         0         0   \n",
       "3       0  ...         0         0         0         0         0         0   \n",
       "4       0  ...         0         0         0         0         0         0   \n",
       "\n",
       "   pixel780  pixel781  pixel782  pixel783  \n",
       "0         0         0         0         0  \n",
       "1         0         0         0         0  \n",
       "2         0         0         0         0  \n",
       "3         0         0         0         0  \n",
       "4         0         0         0         0  \n",
       "\n",
       "[5 rows x 785 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4dd191a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-24T12:53:59.978361Z",
     "iopub.status.busy": "2024-08-24T12:53:59.977267Z",
     "iopub.status.idle": "2024-08-24T12:54:01.160745Z",
     "shell.execute_reply": "2024-08-24T12:54:01.159198Z"
    },
    "papermill": {
     "duration": 1.193193,
     "end_time": "2024-08-24T12:54:01.163998",
     "exception": false,
     "start_time": "2024-08-24T12:53:59.970805",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data = np.array(data) \n",
    "m,n = data.shape\n",
    "np.random.shuffle(data)\n",
    "data_dev = data[0:1000].T\n",
    "X_dev = data_dev[1:n]\n",
    "Y_dev = data_dev[0]\n",
    "X_dev = X_dev/255\n",
    "data_train = data[1000:m].T\n",
    "Y_train = data_train[0]\n",
    "X_train = data_train[1:n]\n",
    "X_train = X_train/255\n",
    "_,m_train = X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "100a1bce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-24T12:54:01.177238Z",
     "iopub.status.busy": "2024-08-24T12:54:01.175837Z",
     "iopub.status.idle": "2024-08-24T12:54:01.193287Z",
     "shell.execute_reply": "2024-08-24T12:54:01.191934Z"
    },
    "papermill": {
     "duration": 0.026908,
     "end_time": "2024-08-24T12:54:01.196045",
     "exception": false,
     "start_time": "2024-08-24T12:54:01.169137",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def init_params(size):\n",
    "    w1 = np.random.rand(10,size)-0.5\n",
    "    b1 = np.random.rand(10,1)-0.5\n",
    "    w2 = np.random.rand(10,10)-0.5\n",
    "    b2 = np.random.rand(10,1)-0.5\n",
    "    return w1,b1,w2,b2\n",
    "    \n",
    "def ReLU(Z):\n",
    "    return np.maximum(0,Z)\n",
    "\n",
    "def Softmax(Z):\n",
    "    exp = np.exp(Z-np.max(Z))\n",
    "    return exp/exp.sum(axis=0)\n",
    "\n",
    "\n",
    "def forward_prop(w1,w2,b1,b2,X):\n",
    "    #X = X.T\n",
    "    Z1 = w1.dot(X) + b1\n",
    "    A1 = ReLU(Z1)\n",
    "    Z2 = w2.dot(A1) + b2\n",
    "    A2 = Softmax(Z2)\n",
    "    return Z1 ,A1 ,Z2 , A2\n",
    "    \n",
    "def one_hot(Y):\n",
    "    one_hot_Y = np.zeros((10,Y.size))\n",
    "    one_hot_Y[Y,np.arange(Y.size)] = 1\n",
    "    #one_hot_Y = one_hot_Y.T\n",
    "    return one_hot_Y\n",
    "\n",
    "def deriv_ReLU(Z):\n",
    "    Z[Z>0] = 1\n",
    "    Z[Z<0] = 0\n",
    "    return Z\n",
    "\n",
    "def back_prop(Z1,Z2,w2,Y,A1,A2,X):\n",
    "        one_hot_Y = one_hot(Y)\n",
    "        dz2 = 2*(A2 - one_hot_Y)\n",
    "        m = Y.size\n",
    "        dw2 = (dz2.dot(A1.T))/m\n",
    "        db2 = (np.sum(dz2 , 1))/m\n",
    "        dz1 = ((w2.T).dot(dz2))*deriv_ReLU(Z1)\n",
    "        dw1 = (dz1.dot(X.T))/m\n",
    "        db1 = (np.sum(dz1 ,1))/m\n",
    "        return dw1 , dw2 , db1 , db2\n",
    "def update_params(w1 , w2 , b1, b2, dw1 , dw2 , db1 , db2, alpha):\n",
    "    w1 = w1 - alpha*dw1\n",
    "    w2 = w2 - alpha*dw2\n",
    "    b1 = b1 - alpha*np.reshape(db1,(10,1))\n",
    "    b2 = b2 - alpha*np.reshape(db2,(10,1))\n",
    "    return w1 , w2 ,b1 , b2\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "61501798",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-24T12:54:01.207978Z",
     "iopub.status.busy": "2024-08-24T12:54:01.207464Z",
     "iopub.status.idle": "2024-08-24T12:54:01.218347Z",
     "shell.execute_reply": "2024-08-24T12:54:01.217011Z"
    },
    "papermill": {
     "duration": 0.019985,
     "end_time": "2024-08-24T12:54:01.221005",
     "exception": false,
     "start_time": "2024-08-24T12:54:01.201020",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_predictions(A2):\n",
    "    return np.argmax(A2,0)\n",
    "\n",
    "def get_accuracy(predictions ,Y):\n",
    "    print(predictions,Y)\n",
    "    return np.sum(predictions==Y)/Y.size\n",
    "\n",
    "def gradient_descent(X,Y,iterations,alpha):\n",
    "    size , m = X.shape\n",
    "    w1,b1,w2,b2 = init_params(size)\n",
    "    for i in range(iterations):\n",
    "        Z1,A1,Z2,A2 = forward_prop(w1,w2,b1,b2,X)\n",
    "        dw1 ,dw2 ,db1 ,db2 = back_prop(Z1,Z2,w2,Y,A1,A2,X)\n",
    "        w1,w2,b1,b2 = update_params(w1 , w2 , b1, b2, dw1 , dw2 , db1 , db2, alpha)\n",
    "        \"\"\"if i%10 == 0:\n",
    "            print(f\"Iterations: {i}\")\n",
    "            predictions = get_predictions(A2)\n",
    "            print(\"Accuracy\",get_accuracy(predictions ,Y))\"\"\"\n",
    "    return w1 , b1 ,w2 ,b2    \n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "627913d2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-24T12:54:01.234143Z",
     "iopub.status.busy": "2024-08-24T12:54:01.232842Z",
     "iopub.status.idle": "2024-08-24T12:55:14.910596Z",
     "shell.execute_reply": "2024-08-24T12:55:14.908764Z"
    },
    "papermill": {
     "duration": 73.689673,
     "end_time": "2024-08-24T12:55:14.915808",
     "exception": false,
     "start_time": "2024-08-24T12:54:01.226135",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "w1,b1,w2,b2 = gradient_descent(X_train,Y_train,500,0.25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "990fd051",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-24T12:55:14.938803Z",
     "iopub.status.busy": "2024-08-24T12:55:14.937991Z",
     "iopub.status.idle": "2024-08-24T12:55:14.957989Z",
     "shell.execute_reply": "2024-08-24T12:55:14.956245Z"
    },
    "papermill": {
     "duration": 0.03759,
     "end_time": "2024-08-24T12:55:14.963553",
     "exception": false,
     "start_time": "2024-08-24T12:55:14.925963",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def make_predictions(w1,b1,w2,b2,X):\n",
    "    _,_,_,A2 = forward_prop(w1,w2,b1,b2,X)\n",
    "    predictions = get_predictions(A2)\n",
    "    return predictions\n",
    "def test_predictions(index,w1,b1,w2,b2):\n",
    "    current_img = X_train[:,index,None]\n",
    "    predictions = make_predictions(w1,b1,w2,b2,X_train[:,index,None])\n",
    "    label = Y_train[index]\n",
    "    print(f\"Prediction: {predictions}\")\n",
    "    print(f\"Label: {label}\")\n",
    "    current_img = current_img.reshape((28,28))*255\n",
    "    plt.gray()\n",
    "    plt.imshow(current_img,interpolation = \"nearest\")\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "55462f24",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-24T12:55:14.988653Z",
     "iopub.status.busy": "2024-08-24T12:55:14.987774Z",
     "iopub.status.idle": "2024-08-24T12:55:15.237794Z",
     "shell.execute_reply": "2024-08-24T12:55:15.236483Z"
    },
    "papermill": {
     "duration": 0.265617,
     "end_time": "2024-08-24T12:55:15.240780",
     "exception": false,
     "start_time": "2024-08-24T12:55:14.975163",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction: [3]\n",
      "Label: 3\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "test_predictions(0,w1,b1,w2,b2)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 861823,
     "sourceId": 3004,
     "sourceType": "competition"
    },
    {
     "datasetId": 3147,
     "sourceId": 5196,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30761,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 84.634475,
   "end_time": "2024-08-24T12:55:15.970256",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-24T12:53:51.335781",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
